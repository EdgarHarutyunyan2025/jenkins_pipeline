properties([disableConcurrentBuilds()])

pipeline {
	agent {
		docker {
			image "python:latest"
			args "--user root"
		}
	}
	environment { 
        USERNAME = 'edo1997edo'
				TELEGRAM_BOT_TOKEN = '7712390154:AAEVH8SEu654OuXGOXBFuPNMckWOcQicIas'
				TELEGRAM_CHAT_ID = '6912904630'
    }

	stages {
		stage("pylint test") {
			steps {
			  echo "========== pylint test =========="
				sh "ls -la"
				sh "pip install pylint"
				sh "pylint pipe3/app.py  --fail-under=4.0"
			}
		}
		stage("build docker image") {
			steps{
			  echo "========== building Docker image =========="
				sh "docker build -t $USERNAME/jenkins-pylint-test:v1 ./pipe3/"
				sh "docker run  --rm  --name jenkins_test  $USERNAME/jenkins-pylint-test:v1"
				sh "docker images"
				}
			}
		stage("login Docker Hub") {
			steps {
				echo "========== docker login =========="
				withCredentials([usernamePassword(credentialsId:'loging_docker_hub',usernameVariable: 'USERNAME',passwordVariable: 'PASSWORD')]) {
						sh "docker login -u $USERNAME -p $PASSWORD"
					}
				}
			}
		stage("push Docker Hub") {
			steps {
				echo "========== start pushing image =========="
				sh "docker push $USERNAME/jenkins-pylint-test:v1"
				}
			}
		}
	

    post {
        success {
            script {
                sendTelegramMessage("✅ Job '${env.JOB_NAME}'  [#${env.BUILD_NUMBER}] SUCCESS !")
            }
        }
        failure {
            script {
                sendTelegramMessage("❌ Job '${env.JOB_NAME}' [#${env.BUILD_NUMBER}] FAILURE !")
            }
        }
    }
}

def sendTelegramMessage(String message) {
    sh """
        curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage \
        -d chat_id=${TELEGRAM_CHAT_ID} \
        -d text="${message}"
    """
}
